
%%

%eop EOF
%verbose
%pure
%name Expr

%term   ID of string  
	| STRING of string
	|CONST of int
 	|IF |ELSE
	|THEN
	|FOR
	|TO |DO | LET |IN |END |PLUS |MINUS | DIV|MUL |COLON   
	|EQUAL | LESS | GREAT |LEQ |GEQ |LPAREN | RPAREN
	|ASS | WHILE |NIL|CURBL|CURBR |TYPE
	| EOF |COMMA|OF |NEW |CLASS |EXTENDS |VAR |SEMICOLON
	|DOT|SQBRL|SQBRR | UMINUS|FUNCTION|PRIMITIVE 
	|BREAK|IMPORT|ARRAY |METHOD
	
%nonterm EXP     of Ast.Expr  
       | EXPS    of Ast.Expr list
       | PROGRAM of Ast.program 
	| DECS of Ast.Dec list
       | LVALUE of Ast.Expr
	| RECORDS of Ast.Expr list
	|ARGUMENTS of Ast.Expr list
	| DEC of Ast.Dec
	|RECORDTAIL of Ast.Expr list
	|EXPTAIL of Ast.Expr list
	|ARGTAIL of Ast.Expr list
	|TYPEFIELDS of (Ast.Expr*Ast.Expr) list
	|TYPEFIELDTAIL of (Ast.Expr*Ast.Expr) list
	|CLASSFIELD of (Ast.Expr)
	|CLASSFIELDS of (Ast.Expr list)
	

%nonassoc ASS
%nonassoc FOR WHILE THEN ID
%nonassoc ELSE
%nonassoc OF SQBRL
%noshift EOF
%nonassoc LEQ GEQ EQUAL LESS GREAT
%left PLUS MINUS  (* + and - are of same precedence *)
%left MUL DIV        (* higher than + and -  *)
%left UMINUS
%pos int
%%

PROGRAM : EXP	               (Ast.foo EXP)
	|DECS			(Ast.bar DECS)
	
	

EXPS    : (* empty *)           ([])
	| EXP EXPTAIL        (EXP::EXPTAIL)
EXPTAIL :			([])
	|COLON EXP EXPTAIL	(EXP::EXPTAIL)
	

EXP     :NIL			(Ast.NIL)
	|CONST                 (Ast.Const CONST)
	|STRING			(Ast.STRING STRING)
	|LVALUE			(LVALUE)
	|LPAREN EXPS RPAREN	(Ast.LISTEXPR EXPS)
	|NEW ID			(Ast.NEW ID)
	|ID SQBRL EXP SQBRR OF EXP %prec OF (Ast.ARRAY ((Ast.VAR ID),EXP1,EXP2))
	|ID LPAREN ARGUMENTS RPAREN		(Ast.FUNCTION ((Ast.VAR ID),ARGUMENTS))
	| ID CURBL RECORDS CURBR 	(Ast.RECORD ((Ast.VAR ID),RECORDS))
	|LVALUE DOT ID LPAREN ARGUMENTS RPAREN	(Ast.METHOD (LVALUE,(Ast.VAR ID),ARGUMENTS))
	|LVALUE ASS EXP %prec ASS      (Ast.ASS (LVALUE, EXP))
	|IF EXP THEN EXP %prec THEN	(Ast.If EXP1 EXP2)
	|IF EXP THEN EXP ELSE EXP %prec ELSE(Ast.ifelse EXP1 EXP2 EXP3)
	|FOR ID ASS EXP TO EXP DO EXP %prec FOR (Ast.for (Ast.VAR ID) EXP1 EXP2 EXP3)
	|LET DECS IN EXPS END	(Ast.Let DECS EXPS)
	|WHILE EXP DO EXP %prec WHILE      (Ast.While EXP1 EXP2)
	|EXP EQUAL EXP       (Ast.equal EXP1 EXP2)
	|EXP LESS EXP       (Ast.less EXP1 EXP2)
	|EXP GREAT EXP		(Ast.great EXP1 EXP2)
	|EXP LEQ   EXP		(Ast.leq EXP1 EXP2)
	|EXP GEQ   EXP		(Ast.geq EXP1 EXP2)
        | EXP PLUS EXP         ( Ast.plus  EXP1 EXP2 )
	| EXP MINUS EXP        ( Ast.minus EXP1 EXP2 )
	| EXP MUL   EXP        ( Ast.mul   EXP1 EXP2 )
	| EXP DIV   EXP        ( Ast.Miv   EXP1 EXP2 )
	| BREAK			(Ast.BREAK)
	|MINUS EXP %prec UMINUS	(Ast.NEGEXP EXP)

RECORDS :(*empty*)		([])
	|ID EQUAL EXP  RECORDTAIL ((Ast.equal (Ast.VAR ID) EXP):: RECORDTAIL)
RECORDTAIL:			([])
	|COMMA ID EQUAL EXP RECORDTAIL ((Ast.equal (Ast.VAR ID) EXP)::RECORDTAIL)	
LVALUE	:ID			(Ast.VAR ID)
	|LVALUE DOT ID 		(Ast.DOT (LVALUE,(Ast.VAR ID)))
	|LVALUE SQBRL EXP SQBRR	(Ast.BOX (LVALUE, EXP))      
	|ID SQBRL EXP SQBRR	(Ast.BOX ((Ast.VAR ID), EXP))      
	
ARGUMENTS:(* empty *)           ([])
	| EXP  ARGTAIL        (EXP::ARGTAIL)
ARGTAIL: 			([])
	|COMMA EXP ARGTAIL	(EXP:: ARGTAIL) 
DECS	: (*empty *)		([])
	| DEC DECS		(DEC::DECS)
DEC	: VAR ID ASS EXP            (Ast.VARDEC ((Ast.VAR ID),EXP))	
	|VAR ID SEMICOLON ID ASS EXP             (Ast.VARDECTYPE ((Ast.VAR ID1),(Ast.VAR ID2),EXP))	
	|IMPORT STRING 		(Ast.IMPORT STRING)
	|FUNCTION ID LPAREN TYPEFIELDS RPAREN EQUAL EXP  (Ast.FUNDEC ((Ast.VAR ID),TYPEFIELDS,EXP))
	|FUNCTION ID LPAREN TYPEFIELDS  RPAREN SEMICOLON ID EQUAL EXP  (Ast.FUNDECTYPE ((Ast.VAR ID1),TYPEFIELDS,(Ast.VAR ID2),EXP))
	|PRIMITIVE ID LPAREN TYPEFIELDS RPAREN (Ast.PRIMITIVEDEC ((Ast.VAR ID),TYPEFIELDS))
	|PRIMITIVE ID LPAREN TYPEFIELDS  RPAREN SEMICOLON ID (Ast.PRIMITIVEDECTYPE ((Ast.VAR ID1),TYPEFIELDS,(Ast.VAR ID2)))
	|TYPE ID EQUAL ID		(Ast.TYPEDEC ((Ast.VAR ID1),(Ast.VAR ID2)))
	|TYPE ID EQUAL CURBL TYPEFIELDS	CURBR	(Ast.TYPEDECFIELDS ((Ast.VAR ID),TYPEFIELDS))
	|TYPE ID EQUAL ARRAY OF ID	(Ast.TYPEARRAYDEC ((Ast.VAR ID1),(Ast.VAR ID2)))
	|TYPE ID EQUAL CLASS  CURBL TYPEFIELDS CURBR	(Ast.CLASSTYPE ((Ast.VAR ID),TYPEFIELDS))
	|TYPE ID EQUAL CLASS EXTENDS ID CURBL TYPEFIELDS CURBR (Ast.CLASSEXTENDSTYPE ((Ast.VAR ID1),(Ast.VAR ID2),TYPEFIELDS))
	|CLASS ID CURBL CLASSFIELDS CURBR (Ast.CLASSDEC ((Ast.VAR ID),CLASSFIELDS))
	|CLASS ID EXTENDS ID CURBL CLASSFIELDS CURBR 	(Ast.CLASSEXTENDSDEC ((Ast.VAR ID1),(Ast.VAR ID2),CLASSFIELDS))
TYPEFIELDS :(*empty*)		([])
	|ID SEMICOLON ID TYPEFIELDTAIL ((((Ast.VAR ID1),(Ast.VAR ID2))):: TYPEFIELDTAIL)
TYPEFIELDTAIL:			([])
	|COMMA ID SEMICOLON ID TYPEFIELDTAIL ((((Ast.VAR ID1),(Ast.VAR ID2)) )::TYPEFIELDTAIL)

CLASSFIELD : METHOD ID LPAREN TYPEFIELDS RPAREN SEMICOLON ID EQUAL EXP (Ast.METHODCLASSTYPE ((Ast.VAR ID1),TYPEFIELDS,(Ast.VAR ID2),EXP))
	|METHOD ID LPAREN TYPEFIELDS RPAREN  EQUAL EXP 		(Ast.METHODCLASS ((Ast.VAR ID),TYPEFIELDS,EXP))

CLASSFIELDS  : 		([])
	| CLASSFIELD CLASSFIELDS (CLASSFIELD :: CLASSFIELDS)









































